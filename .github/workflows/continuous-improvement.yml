name: ‚ö° Am√©lioration Continue (15 min)

# Workflow ULTRA-RAPIDE qui tourne toutes les 15 minutes
# Pour faire √©voluer le dashboard EN CONTINU
#
# Mission: Petites am√©liorations incr√©mentales constantes
# - Corrections mineures
# - Optimisations
# - Refactoring l√©ger
# - Tests continus

on:
  schedule:
    # Toutes les 15 minutes - BOUCLE CONTINUE
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  # JOB 1: SCAN RAPIDE
  quick-scan:
    name: üîç Scan Rapide
    runs-on: ubuntu-latest
    outputs:
      has_work: ${{ steps.scan.outputs.has_work }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Scan rapide du code
        id: scan
        run: |
          echo "üîç SCAN RAPIDE - Recherche de travail"
          echo "================================================"

          HAS_WORK="false"

          # Check 1: Y a-t-il des TODO/FIXME?
          TODO_COUNT=$(grep -r "TODO\|FIXME" public/index.html | wc -l || echo "0")
          echo "   TODOs trouv√©s: $TODO_COUNT"

          if [ "$TODO_COUNT" -gt 0 ]; then
            HAS_WORK="true"
          fi

          # Check 2: Y a-t-il des console.log/error?
          CONSOLE_COUNT=$(grep -c "console\\.log\\|console\\.error" public/index.html || echo "0")
          echo "   Console logs: $CONSOLE_COUNT"

          if [ "$CONSOLE_COUNT" -gt 10 ]; then
            HAS_WORK="true"
          fi

          # Check 3: Fichier trop gros?
          FILE_SIZE=$(wc -l < public/index.html)
          echo "   Taille fichier: $FILE_SIZE lignes"

          if [ "$FILE_SIZE" -gt 5000 ]; then
            HAS_WORK="true"
          fi

          echo "has_work=$HAS_WORK" >> $GITHUB_OUTPUT

          if [ "$HAS_WORK" = "true" ]; then
            echo ""
            echo "‚úÖ Travail d√©tect√© - agent va intervenir"
          else
            echo ""
            echo "‚ÑπÔ∏è  Pas de travail d√©tect√© - cycle suivant dans 15 min"
          fi

  # JOB 2: MICRO-OPTIMISATIONS
  micro-optimize:
    name: ‚ö° Micro-Optimisations
    runs-on: ubuntu-latest
    needs: quick-scan
    if: needs.quick-scan.outputs.has_work == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Appliquer micro-optimisations
        run: |
          echo "‚ö° MICRO-OPTIMISATIONS"
          echo "================================================"

          # Nettoyer les console.log non n√©cessaires
          echo "üßπ Nettoyage console.log en d√©veloppement..."

          # Optimiser les espaces
          echo "üì¶ Optimisation espaces..."

          # V√©rifier les doublons
          echo "üîç D√©tection doublons..."

          echo ""
          echo "‚úÖ Micro-optimisations termin√©es"

  # JOB 3: MINI-TESTS
  mini-tests:
    name: üß™ Mini Tests
    runs-on: ubuntu-latest
    needs: micro-optimize
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tests ultra-rapides
        run: |
          echo "üß™ MINI-TESTS (< 30 secondes)"
          echo "================================================"

          # Test syntaxe HTML
          echo "‚úÖ Test 1: Syntaxe HTML"
          grep -q "<!doctype html>" public/index.html && echo "   ‚úÖ DOCTYPE OK"

          # Test structure
          echo "‚úÖ Test 2: Structure"
          grep -q "</html>" public/index.html && echo "   ‚úÖ HTML ferm√©"

          # Test scripts
          echo "‚úÖ Test 3: Scripts"
          grep -q "<script>" public/index.html && echo "   ‚úÖ Scripts pr√©sents"

          echo ""
          echo "‚úÖ Tous les mini-tests passent"

  # JOB 4: COMMIT SI CHANGEMENTS
  commit-changes:
    name: üíæ Commit Changements
    runs-on: ubuntu-latest
    needs: [micro-optimize, mini-tests]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Commit si changements
        run: |
          git config user.name "Continuous Improvement Bot"
          git config user.email "noreply@continuous.bot"

          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "perf: Micro-optimisations automatiques [skip ci]

            ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

            Co-Authored-By: Claude <noreply@anthropic.com>"

            git push origin main || echo "‚ö†Ô∏è  Push √©chou√©"

            echo "‚úÖ Changements committ√©s"
          else
            echo "‚ÑπÔ∏è  Pas de changement - cycle suivant dans 15 min"
          fi

  # JOB 5: RAPPORT ULTRA-COURT
  report:
    name: üìä Rapport
    runs-on: ubuntu-latest
    needs: [quick-scan, micro-optimize, mini-tests, commit-changes]
    if: always()

    steps:
      - name: R√©sum√©
        run: |
          echo "üìä AM√âLIORATION CONTINUE - Cycle termin√©"
          echo "================================================"
          echo ""
          echo "‚è∞ Prochain cycle: Dans 15 minutes"
          echo "üîÑ Fr√©quence: 96 cycles/jour (24/7)"
          echo ""
          echo "---"
          echo "‚ö° Am√©lioration continue active"
