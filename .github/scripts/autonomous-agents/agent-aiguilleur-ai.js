#!/usr/bin/env node

/**
 * AGENT AIGUILLEUR - VERSION AI-POWERED (Traffic Controller)
 *
 * Utilise Claude AI pour g√©rer intelligemment les workflows
 *
 * Responsabilit√©s:
 * - D√©tecter workflows legacy qui cr√©ent des conflits
 * - Monitorer sant√© de tous les workflows avec IA
 * - Communiquer avec autres agents si probl√®mes d√©tect√©s
 * - Prendre actions correctives intelligentes
 * - Annuler workflows redondants/conflictuels
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const { ClaudeAIEngine } = require('./claude-ai-engine');
const { UserEscalationSystem } = require('./user-escalation-system');

// ============================================================================
// CONFIGURATION
// ============================================================================

const CONFIG = {
  projectRoot: path.resolve(__dirname, '../../..'),
  communicationDir: path.resolve(__dirname, '../../../.github/agents-communication'),
  repoOwner: '13YAdmin',
  repoName: 'hubspot-dashboard',
  useAI: !!process.env.ANTHROPIC_API_KEY,
  // Workflows CRITIQUES qui DOIVENT tourner
  criticalWorkflows: [
    { name: 'üè¢ Entreprise Autonome IA', maxDelayMinutes: 10, file: 'autonomous-company.yml' },
    { name: 'üîÑ Boucle Dev ‚Üí QA ‚Üí Debug', maxDelayMinutes: 20, file: 'dev-qa-debug-loop.yml' }
  ],
  // Workflows legacy √† surveiller (peuvent cr√©er conflits)
  legacyWorkflows: [
    'autonomous-loop.yml',  // Ancienne version, peut √™tre redondant
    'fetch-hubspot-data.yml' // Si tourne en m√™me temps que d'autres
  ],
  // Fr√©quence minimale entre runs du m√™me workflow (minutes)
  minIntervalMinutes: 15
};

// ============================================================================
// COMMUNICATION HUB
// ============================================================================

class CommunicationHub {
  constructor() {
    this.baseDir = CONFIG.communicationDir;
    this.ensureDirectories();
  }

  ensureDirectories() {
    if (!fs.existsSync(this.baseDir)) {
      fs.mkdirSync(this.baseDir, { recursive: true });
    }
  }

  async addRecommendation(recommendation) {
    const file = path.join(this.baseDir, 'recommendations.json');
    let data = { items: [], lastUpdate: new Date().toISOString() };

    if (fs.existsSync(file)) {
      const existing = JSON.parse(fs.readFileSync(file, 'utf8'));
      data.items = Array.isArray(existing) ? existing : (existing.items || []);
    }

    const newRec = {
      id: `REC-${Date.now()}`,
      from: 'Agent Aiguilleur (AI)',
      timestamp: new Date().toISOString(),
      ...recommendation,
      status: 'pending'
    };

    data.items.push(newRec);
    data.lastUpdate = new Date().toISOString();

    fs.writeFileSync(file, JSON.stringify(data, null, 2));
    return newRec.id;
  }
}

// ============================================================================
// AGENT AIGUILLEUR AI-POWERED
// ============================================================================

class AgentAiguilleurAI {
  constructor() {
    this.ai = new ClaudeAIEngine();
    this.hub = new CommunicationHub();
    this.escalationSystem = new UserEscalationSystem();
    this.workflowRuns = [];
    this.conflicts = [];
    this.legacyIssues = [];
    this.recommendations = [];
    this.healthScore = 100;
    this.useAI = CONFIG.useAI;

    if (this.useAI) {
      console.log('üö¶ Agent Aiguilleur AI - Mode INTELLIGENCE ARTIFICIELLE activ√©');
    } else {
      console.log('‚ö†Ô∏è  Agent Aiguilleur AI - Mode fallback');
    }
  }

  /**
   * Point d'entr√©e principal
   */
  async run() {
    console.log('\nüö¶ AGENT AIGUILLEUR (AI-POWERED) - Traffic Controller');
    console.log('======================================================\n');

    try {
      // 1. R√©cup√©rer √©tat workflows
      await this.fetchWorkflowRuns();

      // 2. üö® Lire TOUS les workflows configur√©s
      await this.readAllWorkflows();

      // 3. D√©tecter workflows legacy probl√©matiques
      await this.detectLegacyWorkflows();

      // 4. Analyser avec IA si disponible
      if (this.useAI) {
        await this.analyzeWithAI();
      } else {
        await this.analyzeWithRules();
      }

      // 5. Communiquer aux autres agents si n√©cessaire
      await this.communicateToAgents();

      // 6. G√©n√©rer rapport
      await this.saveReport();

      console.log('\n‚úÖ Agent Aiguilleur AI - Ex√©cution termin√©e');
      console.log(`üìä Score de sant√©: ${this.healthScore}/100`);
      console.log(`üö® Conflits d√©tect√©s: ${this.conflicts.length}`);
      console.log(`‚ö†Ô∏è  Legacy issues: ${this.legacyIssues.length}`);

    } catch (error) {
      console.error('‚ùå Erreur Agent Aiguilleur AI:', error.message);
      throw error;
    }
  }

  /**
   * R√©cup√©rer √©tat des workflows
   */
  async fetchWorkflowRuns() {
    console.log('üì° R√©cup√©ration workflows...\n');

    try {
      const result = execSync(
        `gh api repos/${CONFIG.repoOwner}/${CONFIG.repoName}/actions/runs?per_page=30`,
        { encoding: 'utf-8' }
      );

      const data = JSON.parse(result);
      this.workflowRuns = data.workflow_runs || [];

      const running = this.workflowRuns.filter(r => r.status === 'in_progress').length;
      const failed = this.workflowRuns.filter(r => r.conclusion === 'failure').length;

      console.log(`   ‚úÖ ${this.workflowRuns.length} runs r√©cup√©r√©s`);
      console.log(`   üèÉ En cours: ${running}`);
      console.log(`   ‚ùå √âchecs: ${failed}\n`);

    } catch (error) {
      console.log('   ‚ö†Ô∏è  API non disponible, donn√©es locales');
      this.workflowRuns = [];
    }
  }

  /**
   * Lire TOUS les workflows du projet
   */
  async readAllWorkflows() {
    console.log('üìÇ Lecture de TOUS les workflows configur√©s...\n');

    try {
      const workflowsDir = path.join(CONFIG.projectRoot, '.github/workflows');
      const workflowFiles = fs.readdirSync(workflowsDir)
        .filter(f => f.endsWith('.yml') || f.endsWith('.yaml'));

      this.allWorkflows = [];

      for (const file of workflowFiles) {
        const filePath = path.join(workflowsDir, file);
        const content = fs.readFileSync(filePath, 'utf8');

        // Extraire le nom et le schedule
        const nameMatch = content.match(/name:\s*(.+)/);
        const scheduleMatch = content.match(/schedule:\s*\n\s*-\s*cron:\s*['"](.+)['"]/);

        const workflow = {
          file,
          name: nameMatch ? nameMatch[1].trim() : file,
          hasSchedule: !!scheduleMatch,
          schedule: scheduleMatch ? scheduleMatch[1] : null,
          content: content.substring(0, 500) // Premier 500 chars pour analyse IA
        };

        this.allWorkflows.push(workflow);
        console.log(`   üìÑ ${workflow.name}${workflow.hasSchedule ? ` (cron: ${workflow.schedule})` : ' (manuel)'}`);
      }

      console.log(`\n   ‚úÖ ${this.allWorkflows.length} workflows configur√©s\n`);

    } catch (error) {
      console.log('   ‚ö†Ô∏è  Impossible de lire workflows, skip');
      this.allWorkflows = [];
    }
  }

  /**
   * D√©tecter workflows legacy probl√©matiques
   */
  async detectLegacyWorkflows() {
    console.log('üîç D√©tection workflows legacy...\n');

    const recentRuns = this.workflowRuns.slice(0, 20);

    for (const legacyName of CONFIG.legacyWorkflows) {
      const legacyRuns = recentRuns.filter(r =>
        r.path && r.path.includes(legacyName)
      );

      if (legacyRuns.length > 0) {
        // V√©rifier si tourne en m√™me temps que nouveaux workflows
        for (const run of legacyRuns) {
          if (run.status === 'in_progress' || run.status === 'queued') {
            const concurrent = recentRuns.filter(r =>
              r.id !== run.id &&
              (r.status === 'in_progress' || r.status === 'queued') &&
              Math.abs(new Date(r.created_at) - new Date(run.created_at)) < 5 * 60 * 1000
            );

            if (concurrent.length > 0) {
              this.legacyIssues.push({
                workflow: legacyName,
                runId: run.id,
                issue: 'Tourne en m√™me temps que nouveaux workflows',
                concurrent: concurrent.map(c => c.name),
                severity: 'high'
              });

              console.log(`   ‚ö†Ô∏è  Legacy: ${legacyName} - conflit potentiel`);
              console.log(`      Concurrent avec: ${concurrent.map(c => c.name).join(', ')}`);
            }
          }
        }

        // V√©rifier si √©choue fr√©quemment
        const recentLegacy = legacyRuns.slice(0, 5);
        const failureRate = recentLegacy.filter(r => r.conclusion === 'failure').length / recentLegacy.length;

        if (failureRate > 0.5) {
          this.legacyIssues.push({
            workflow: legacyName,
            issue: `Taux d'√©chec √©lev√©: ${Math.round(failureRate * 100)}%`,
            severity: 'high',
            recommendation: 'Consid√©rer d√©sactivation ou migration vers version AI'
          });

          console.log(`   üî¥ Legacy: ${legacyName} - ${Math.round(failureRate * 100)}% √©checs`);
        }
      }
    }

    if (this.legacyIssues.length === 0) {
      console.log('   ‚úÖ Aucun probl√®me legacy d√©tect√©');
    }
  }

  /**
   * Analyser avec IA
   */
  async analyzeWithAI() {
    console.log('\nüß† Analyse intelligente avec Claude AI...\n');

    const failedRuns = this.workflowRuns.filter(r => r.conclusion === 'failure').slice(0, 10);
    const runningRuns = this.workflowRuns.filter(r => r.status === 'in_progress');

    // Calculer le dernier run de chaque workflow
    const lastRunByWorkflow = {};
    for (const run of this.workflowRuns) {
      if (!lastRunByWorkflow[run.name] || new Date(run.created_at) > new Date(lastRunByWorkflow[run.name].created_at)) {
        lastRunByWorkflow[run.name] = run;
      }
    }

    // Trouver workflows configur√©s mais qui n'ont PAS tourn√© r√©cemment
    const workflowsNotRunning = this.allWorkflows
      .filter(w => w.hasSchedule) // Seulement ceux avec schedule
      .filter(w => {
        const lastRun = lastRunByWorkflow[w.name];
        if (!lastRun) return true; // Jamais tourn√©
        const minutesSinceLastRun = (Date.now() - new Date(lastRun.created_at)) / 1000 / 60;
        // Si cron toutes les 5min mais pas tourn√© depuis 15min = probl√®me!
        if (w.schedule.includes('*/5') && minutesSinceLastRun > 15) return true;
        if (w.schedule.includes('*/15') && minutesSinceLastRun > 45) return true;
        if (w.schedule.includes('0 *') && minutesSinceLastRun > 120) return true; // Toutes les heures
        return false;
      });

    const situation = `üö® ANALYSE COMPL√àTE DES WORKFLOWS - D√âTECTION AUTOMATIQUE

üìä WORKFLOWS CONFIGUR√âS: ${this.allWorkflows.length}
${this.allWorkflows.map(w => `- ${w.name}${w.hasSchedule ? ` [cron: ${w.schedule}]` : ' [manuel]'}`).join('\n')}

üèÉ WORKFLOWS EN COURS: ${runningRuns.length}
${runningRuns.map(r => `- ${r.name} (depuis ${this.getTimeSince(r.created_at)})`).join('\n')}

‚ö†Ô∏è WORKFLOWS AVEC SCHEDULE MAIS PAS TOURN√âS: ${workflowsNotRunning.length}
${workflowsNotRunning.map(w => {
  const lastRun = lastRunByWorkflow[w.name];
  const delay = lastRun ? this.getTimeSince(lastRun.created_at) : 'JAMAIS';
  return `- üî¥ ${w.name} [schedule: ${w.schedule}] ‚Üí Dernier run: ${delay}`;
}).join('\n')}

‚ùå √âCHECS R√âCENTS: ${failedRuns.length}
${failedRuns.map(r => `- ${r.name} (${r.conclusion})`).join('\n')}

üìÇ WORKFLOWS LEGACY: ${this.legacyIssues.length}
${this.legacyIssues.map(i => `- ${i.workflow}: ${i.issue}`).join('\n')}

üéØ CONTEXTE:
- Dashboard HubSpot autonome avec agents IA
- MISSION: Les workflows DOIVENT tourner automatiquement
- Si un workflow a un schedule mais ne tourne pas = PROBL√àME CRITIQUE
- Le CEO attend des r√©sultats rapides

‚ö†Ô∏è VOTRE MISSION IA:
D√©terminez AUTOMATIQUEMENT quels workflows ne tournent PAS alors qu'ils DEVRAIENT.
Si des workflows critiques ne tournent pas = escalade IMM√âDIATE.
`;

    const analysis = await this.ai.makeDecision(
      situation,
      [
        'Tout va bien - Workflows tournent normalement',
        'üö® ALERTE: Workflows critiques ne tournent PAS - Escalade CEO',
        'Workflows √©chouent - Corrections n√©cessaires',
        'Conflicts entre workflows - Annuler legacy',
        'Probl√®me GitHub Actions - Attendre'
      ],
      [
        'üö® PRIORIT√â: D√©tecter workflows qui ne tournent PAS',
        'Workflows avec schedule DOIVENT tourner automatiquement',
        'Si workflow critique ne tourne pas depuis >15min = ALERTE',
        'Escalader au CEO si workflows bloqu√©s'
      ]
    );

    console.log('üéØ Analyse IA:\n');
    console.log(JSON.stringify(analysis, null, 2));

    // Interpr√©ter les d√©cisions
    if (analysis && !analysis.error) {
      // üîß AUTO-R√âPARATION: Workflows qui ne tournent pas = FIX AUTOMATIQUE
      if (workflowsNotRunning.length > 0) {
        console.log(`\nüö® ${workflowsNotRunning.length} workflow(s) ne tournent PAS - R√âPARATION AUTOMATIQUE...\n`);

        // FIXER AUTOMATIQUEMENT - plus d'escalade, on r√©pare!
        await this.autoFixWorkflows(workflowsNotRunning, lastRunByWorkflow);

        this.recommendations.push({
          type: 'workflows_auto_fixed',
          title: `üîß ${workflowsNotRunning.length} workflow(s) auto-r√©par√©s`,
          description: `L'Aiguilleur AI a d√©tect√© et FIX√â automatiquement ${workflowsNotRunning.length} workflow(s) qui ne tournaient pas.`,
          priority: 'high'
        });
      }

      // Workflows √©chouent (diff√©rent de "ne tournent pas") = suggestions IA
      if (analysis.decision && analysis.decision.toLowerCase().includes('alerte') && failedRuns.length > 0) {
        this.recommendations.push({
          type: 'workflows_failing',
          title: `‚ö†Ô∏è ${failedRuns.length} workflow(s) √©chouent`,
          description: analysis.reasoning || 'Workflows √©chouent - corrections n√©cessaires',
          priority: 'high'
        });
      }

      if (analysis.decision && analysis.decision.toLowerCase().includes('annuler')) {
        this.recommendations.push({
          type: 'cancel_legacy',
          title: 'Annuler workflows legacy conflictuels',
          description: analysis.reasoning || 'Workflows legacy cr√©ent des conflits',
          priority: 'high'
        });
      }

      if (analysis.decision && analysis.decision.toLowerCase().includes('grave')) {
        this.recommendations.push({
          type: 'critical_issue',
          title: 'Probl√®me critique d√©tect√©',
          description: analysis.reasoning || 'Intervention n√©cessaire',
          priority: 'critical'
        });
      }

      // Calculer score sant√© bas√© sur analyse IA
      if (analysis.decision && analysis.decision.toLowerCase().includes('bien')) {
        this.healthScore = 100;
      } else if (failedRuns.length > 5) {
        this.healthScore = Math.max(30, 100 - (failedRuns.length * 10));
      } else {
        this.healthScore = Math.max(50, 100 - (failedRuns.length * 15));
      }

      // Utiliser les risques de l'IA
      if (analysis.risks && analysis.risks.length > 0) {
        for (const risk of analysis.risks) {
          this.recommendations.push({
            type: 'risk',
            title: `Risque: ${risk}`,
            description: `Risque identifi√© par IA: ${risk}`,
            priority: 'medium'
          });
        }
      }
    }

    console.log(`\n‚úÖ Analyse IA termin√©e - Score: ${this.healthScore}/100`);
  }

  /**
   * Analyser avec r√®gles (fallback)
   */
  async analyzeWithRules() {
    console.log('\n‚ö†Ô∏è  Mode fallback - Analyse basique\n');

    const failedRuns = this.workflowRuns.filter(r => r.conclusion === 'failure');

    if (failedRuns.length > 5) {
      this.healthScore = 50;
      this.recommendations.push({
        type: 'high_failure_rate',
        title: 'Taux d\'√©chec √©lev√©',
        description: `${failedRuns.length} workflows ont √©chou√© r√©cemment`,
        priority: 'high'
      });
    }

    if (this.legacyIssues.length > 0) {
      this.recommendations.push({
        type: 'legacy_workflows',
        title: 'Workflows legacy d√©tect√©s',
        description: `${this.legacyIssues.length} workflows legacy cr√©ent des probl√®mes`,
        priority: 'high'
      });
    }

    console.log(`‚úÖ Analyse basique termin√©e - Score: ${this.healthScore}/100`);
  }

  /**
   * Communiquer aux autres agents
   */
  async communicateToAgents() {
    console.log('\nüì§ Communication aux autres agents...\n');

    for (const rec of this.recommendations) {
      await this.hub.addRecommendation({
        type: 'traffic_control',
        title: rec.title,
        description: rec.description,
        priority: rec.priority,
        category: 'Workflow Management',
        actionType: rec.type,
        targetAgent: 'Agent Chef'
      });

      console.log(`‚úâÔ∏è  [${rec.priority}] ${rec.title}`);
    }

    if (this.recommendations.length === 0) {
      console.log('‚ÑπÔ∏è  Aucune recommandation - syst√®me sain');
    } else {
      console.log(`\n‚úÖ ${this.recommendations.length} recommandations envoy√©es au Chef`);
    }
  }

  /**
   * Calculer temps √©coul√©
   */
  getTimeSince(timestamp) {
    const minutes = Math.floor((Date.now() - new Date(timestamp)) / 60000);
    if (minutes < 60) return `${minutes}min`;
    const hours = Math.floor(minutes / 60);
    return `${hours}h${minutes % 60}min`;
  }

  /**
   * üîß AUTO-R√âPARER LES WORKFLOWS CASS√âS
   * L'IA d√©tecte ET FIXE automatiquement - z√©ro intervention humaine
   */
  async autoFixWorkflows(workflowsNotRunning, lastRunByWorkflow) {
    console.log('\nüîß AUTO-R√âPARATION DES WORKFLOWS\n');

    for (const workflow of workflowsNotRunning) {
      console.log(`üî® Fixing: ${workflow.name}...`);

      try {
        // 1. V√©rifier si le workflow existe sur GitHub
        const checkCmd = `gh workflow list | grep -i "${workflow.name.substring(0, 30)}" || echo "NOT_FOUND"`;
        const { execSync } = require('child_process');
        const ghResult = execSync(checkCmd, { encoding: 'utf8', stdio: 'pipe' });

        if (ghResult.includes('NOT_FOUND')) {
          console.log(`‚ö†Ô∏è  Workflow "${workflow.name}" non trouv√© sur GitHub - Probable push manquant`);

          // FIX AUTOMATIQUE: Commit + Push
          console.log('üöÄ PUSH AUTOMATIQUE DU WORKFLOW...');
          execSync(`git add "${path.join(CONFIG.projectRoot, '.github/workflows', workflow.file)}"`, { cwd: CONFIG.projectRoot });
          execSync(`git commit -m "ü§ñ Aiguilleur AI: Auto-push workflow ${workflow.name}" || echo "Already committed"`, { cwd: CONFIG.projectRoot });
          execSync('git push origin main', { cwd: CONFIG.projectRoot });
          console.log('‚úÖ Workflow push√© sur GitHub!');

          // Attendre 5 secondes que GitHub actualise
          await new Promise(resolve => setTimeout(resolve, 5000));
        }

        // 2. Trigger le workflow manuellement
        console.log(`‚ö° D√©clenchement manuel de "${workflow.name}"...`);
        const triggerCmd = `gh workflow run "${workflow.file}" --ref main`;
        execSync(triggerCmd, { cwd: CONFIG.projectRoot, stdio: 'inherit' });
        console.log(`‚úÖ Workflow "${workflow.name}" d√©clench√©!\n`);

      } catch (error) {
        console.log(`‚ùå Erreur r√©paration ${workflow.name}:`, error.message);

        // Escalade SEULEMENT si vraiment impossible de fixer
        this.escalateToCEO(`üö® IMPOSSIBLE DE FIXER: ${workflow.name}

Erreur: ${error.message}

‚ö†Ô∏è  Intervention manuelle requise - probl√®me GitHub Actions ou permissions.`);
      }
    }

    console.log('‚úÖ AUTO-R√âPARATION TERMIN√âE\n');
  }

  /**
   * Escalade automatique au CEO (seulement pour probl√®mes NON auto-r√©parables)
   */
  escalateToCEO(message) {
    console.log('\nüö® ESCALADE AU CEO!\n');

    try {
      const meetingNotesPath = path.join(CONFIG.projectRoot, 'MEETING-NOTES-CEO.md');

      if (!fs.existsSync(meetingNotesPath)) {
        console.log('‚ö†Ô∏è  Meeting Notes non trouv√©, skip escalade');
        return;
      }

      let content = fs.readFileSync(meetingNotesPath, 'utf8');

      const escalation = `

---

## üö® ALERTE AIGUILLEUR - ${new Date().toLocaleString('fr-FR')}

${message}

**Status**: ‚ö†Ô∏è ESCALADE AUTOMATIQUE - Intervention manuelle requise

---
`;

      // Ins√©rer apr√®s "## üìù HISTORIQUE DES R√âUNIONS"
      content = content.replace(
        /(## üìù HISTORIQUE DES R√âUNIONS)/,
        `$1${escalation}`
      );

      fs.writeFileSync(meetingNotesPath, content);
      console.log('‚úÖ Escalade ajout√©e dans MEETING-NOTES-CEO.md\n');

    } catch (error) {
      console.log('‚ùå Erreur escalade CEO:', error.message);
    }
  }

  /**
   * Sauvegarder rapport
   */
  async saveReport() {
    const reportPath = path.join(CONFIG.projectRoot, 'RAPPORT-AGENT-AIGUILLEUR-AI.md');

    const report = `# üö¶ RAPPORT AIGUILLEUR - AI-Powered (Traffic Controller)

**Date**: ${new Date().toLocaleString('fr-FR')}
**Mode**: ${this.useAI ? '‚úÖ Intelligence Artificielle (Claude)' : '‚ö†Ô∏è  Fallback (r√®gles simples)'}

---

## üìä √âTAT WORKFLOWS

- **Total runs analys√©s**: ${this.workflowRuns.length}
- **En cours**: ${this.workflowRuns.filter(r => r.status === 'in_progress').length}
- **√âchecs r√©cents**: ${this.workflowRuns.filter(r => r.conclusion === 'failure').length}
- **Score de sant√©**: ${this.healthScore}/100

---

## ‚ö†Ô∏è  WORKFLOWS LEGACY D√âTECT√âS

Total: ${this.legacyIssues.length}

${this.legacyIssues.map((issue, i) => `
### ${i + 1}. ${issue.workflow}

- **Issue**: ${issue.issue}
- **S√©v√©rit√©**: ${issue.severity}
${issue.concurrent ? `- **Conflits avec**: ${issue.concurrent.join(', ')}` : ''}
${issue.recommendation ? `- **Recommandation**: ${issue.recommendation}` : ''}
`).join('\n')}

${this.legacyIssues.length === 0 ? 'Aucun workflow legacy probl√©matique d√©tect√© ‚úÖ' : ''}

---

## üö® CONFLITS D√âTECT√âS

Total: ${this.conflicts.length}

${this.conflicts.map((c, i) => `${i + 1}. ${c.description}`).join('\n') || 'Aucun conflit ‚úÖ'}

---

## üí° RECOMMANDATIONS

Total: ${this.recommendations.length}

${this.recommendations.map((rec, i) => `
### ${i + 1}. ${rec.title}

- **Type**: ${rec.type}
- **Priorit√©**: ${rec.priority}
- **Description**: ${rec.description}
`).join('\n')}

${this.recommendations.length === 0 ? 'Aucune action n√©cessaire - syst√®me sain ‚úÖ' : ''}

---

## üéØ R√âSUM√â

${this.useAI ?
  `‚úÖ Agent Aiguilleur utilise Claude AI pour analyse intelligente.

L'analyse couvre:
- D√©tection workflows legacy conflictuels
- Analyse des patterns d'√©chec
- Recommandations contextuelles
- Communication avec autres agents

Les d√©cisions sont bas√©es sur analyse contextuelle, pas r√®gles fixes.` :
  `‚ö†Ô∏è  Agent Aiguilleur fonctionne en mode fallback.

Pour activer l'analyse intelligente:
1. Configurer ANTHROPIC_API_KEY
2. Voir CONFIGURATION-IA.md

Avec IA: d√©tection intelligente, d√©cisions contextuelles
Sans IA: r√®gles basiques, d√©tection limit√©e`}

---

## üîÑ √âTAT GLOBAL

${this.healthScore >= 80 ? 'üü¢ SAIN' : this.healthScore >= 50 ? 'üü† D√âGRAD√â' : 'üî¥ CRITIQUE'}

Score: ${this.healthScore}/100

---

**üö¶ G√©n√©r√© par Agent Aiguilleur AI-Powered**
**"Traffic controller intelligent pour workflows"**
`;

    fs.writeFileSync(reportPath, report, 'utf8');
    console.log(`\nüìÑ Rapport sauvegard√©: RAPPORT-AGENT-AIGUILLEUR-AI.md`);
  }
}

// ============================================================================
// EX√âCUTION
// ============================================================================

if (require.main === module) {
  const agent = new AgentAiguilleurAI();

  agent.run()
    .then(() => {
      console.log('\n‚úÖ Agent Aiguilleur AI - Succ√®s');
      process.exit(0);
    })
    .catch(error => {
      console.error('\n‚ùå Agent Aiguilleur AI - √âchec:', error);
      process.exit(1);
    });
}

module.exports = { AgentAiguilleurAI, CONFIG };
