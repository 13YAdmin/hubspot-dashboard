#!/usr/bin/env node

/**
 * üëî AGENT RH (Recruitment & Human Resources)
 *
 * Mission: G√©rer l'√©quipe d'agents comme un vrai d√©partement RH
 *
 * Responsabilit√©s:
 * 1. WORKFORCE PLANNING
 *    - Analyser la charge de travail de chaque agent
 *    - D√©tecter les goulots d'√©tranglement
 *    - Identifier les besoins en recrutement
 *
 * 2. RECRUITMENT
 *    - "Recruter" (cr√©er) automatiquement de nouveaux agents
 *    - G√©n√©rer le code de l'agent
 *    - Cr√©er le workflow GitHub Actions
 *    - Onboarding du nouvel agent
 *
 * 3. TEAM MANAGEMENT
 *    - √âquilibrer la charge entre agents
 *    - R√©organiser les √©quipes selon les projets
 *    - D√©sactiver agents sous-utilis√©s
 *
 * 4. PERFORMANCE REVIEW
 *    - √âvaluer la performance de chaque agent
 *    - Identifier agents inefficaces
 *    - Proposer formations/am√©liorations
 *
 * 5. SCALING
 *    - Scale up automatiquement si surcharge
 *    - Scale down si sous-utilisation
 *    - Maintenir √©quipe optimale
 *
 * Principe: "Une soci√©t√© qui s'auto-g√®re"
 *
 * STRUCTURE SOCI√âT√â COMPL√àTE:
 *
 * C-LEVEL
 * - CEO (Agent Chef de Projet)
 * - CTO (Agent Visionnaire)
 * - COO (Agent Producteur)
 *
 * PRODUCT
 * - Product Manager
 * - Product Designer
 * - UX Researcher
 *
 * ENGINEERING
 * - Tech Lead
 * - Senior Developer
 * - Junior Developer
 * - QA Engineer
 * - DevOps Engineer
 *
 * DATA
 * - Data Engineer
 * - Data Analyst
 * - ML Engineer
 *
 * BUSINESS
 * - Sales Manager
 * - Marketing Manager
 * - Customer Success Manager
 *
 * OPERATIONS
 * - Finance Manager (Agent RH g√®re aussi)
 * - HR Manager (cet agent)
 * - Legal/Compliance
 *
 * SUPPORT
 * - Customer Support
 * - Documentation Writer
 * - Community Manager
 */

const fs = require('fs').promises;
const path = require('path');
const CommunicationHub = require('./communication-hub.js');

class AgentRH {
  constructor() {
    this.hub = new CommunicationHub();
    this.agentsDir = path.join(process.cwd(), '.github/scripts/autonomous-agents');
    this.workflowsDir = path.join(process.cwd(), '.github/workflows');

    // Structure soci√©t√© compl√®te
    this.companyStructure = {
      'C-Level': [
        { role: 'CEO', agent: 'Agent Chef de Projet', exists: true, priority: 'critical' },
        { role: 'CTO', agent: 'Agent Visionnaire', exists: true, priority: 'critical' },
        { role: 'COO', agent: 'Agent Producteur', exists: true, priority: 'critical' }
      ],
      'Product': [
        { role: 'Product Manager', agent: 'Agent Product Manager', exists: false, priority: 'high' },
        { role: 'Product Designer', agent: 'Agent Designer', exists: false, priority: 'medium' },
        { role: 'UX Researcher', agent: 'Agent UX Research', exists: false, priority: 'low' }
      ],
      'Engineering': [
        { role: 'Tech Lead', agent: 'Agent Tech Lead', exists: false, priority: 'high' },
        { role: 'Senior Developer', agent: 'Agent D√©veloppeur', exists: false, priority: 'critical' },
        { role: 'QA Engineer', agent: 'Agent QA', exists: false, priority: 'critical' },
        { role: 'DevOps Engineer', agent: 'Agent DevOps', exists: false, priority: 'high' },
        { role: 'Security Engineer', agent: 'Agent Security', exists: false, priority: 'medium' }
      ],
      'Data': [
        { role: 'Data Engineer', agent: 'Agent Data Engineer', exists: false, priority: 'medium' },
        { role: 'Data Analyst', agent: 'Agent Data Analyst', exists: false, priority: 'medium' },
        { role: 'ML Engineer', agent: 'Agent ML', exists: false, priority: 'low' }
      ],
      'Business': [
        { role: 'Sales Manager', agent: 'Agent Sales', exists: false, priority: 'low' },
        { role: 'Marketing Manager', agent: 'Agent Marketing', exists: false, priority: 'low' },
        { role: 'Customer Success', agent: 'Agent Customer Success', exists: false, priority: 'medium' }
      ],
      'Operations': [
        { role: 'Finance Manager', agent: 'Agent Finance', exists: false, priority: 'medium' },
        { role: 'HR Manager', agent: 'Agent RH', exists: true, priority: 'high' },
        { role: 'Legal/Compliance', agent: 'Agent Legal', exists: false, priority: 'low' }
      ],
      'Support': [
        { role: 'Customer Support', agent: 'Agent Support', exists: false, priority: 'medium' },
        { role: 'Documentation', agent: 'Agent Documentation', exists: true, priority: 'high' },
        { role: 'Community Manager', agent: 'Agent Community', exists: false, priority: 'low' }
      ],
      'Infrastructure': [
        { role: 'Monitoring', agent: 'Agent Monitoring', exists: false, priority: 'critical' },
        { role: 'Self-Healing', agent: 'Agent Self-Healing', exists: false, priority: 'critical' },
        { role: 'Optimization', agent: 'Agent Optimization', exists: false, priority: 'high' },
        { role: 'Traffic Controller', agent: 'Agent Aiguilleur', exists: true, priority: 'high' }
      ]
    };

    this.recruitmentNeeds = [];
    this.workloadAnalysis = {};
    this.teamSize = 0;
    this.optimalTeamSize = 0;
  }

  async run() {
    console.log('üëî AGENT RH - Recruitment & Scaling');
    console.log('================================================');
    console.log('"Une soci√©t√© qui s\'auto-g√®re et recrute selon les besoins"');
    console.log('================================================\n');

    try {
      await this.hub.init();

      // 1. INVENTAIRE des agents existants
      await this.inventoryCurrentTeam();

      // 2. ANALYSE charge de travail
      await this.analyzeWorkload();

      // 3. IDENTIFICATION besoins recrutement
      await this.identifyRecruitmentNeeds();

      // 4. RECRUTEMENT automatique si n√©cessaire
      await this.autoRecruit();

      // 5. TEAM OPTIMIZATION
      await this.optimizeTeam();

      // 6. PERFORMANCE REVIEW
      await this.performanceReview();

      // 7. RAPPORT RH
      await this.generateHRReport();

      console.log('\n‚úÖ Agent RH termin√©');
      console.log(`üë• √âquipe actuelle: ${this.teamSize} agents`);
      console.log(`üéØ √âquipe optimale: ${this.optimalTeamSize} agents`);
      console.log(`üìù Recrutements n√©cessaires: ${this.recruitmentNeeds.length}`);

    } catch (error) {
      console.error('‚ùå Erreur Agent RH:', error.message);
      process.exit(1);
    }
  }

  /**
   * 1. INVENTAIRE des agents existants
   */
  async inventoryCurrentTeam() {
    console.log('üìä INVENTAIRE √âQUIPE ACTUELLE\n');

    // Lister tous les agents existants
    const files = await fs.readdir(this.agentsDir);
    const agentFiles = files.filter(f => f.startsWith('agent-') && f.endsWith('.js'));

    this.teamSize = agentFiles.length;

    console.log(`   üë• Total agents: ${this.teamSize}\n`);

    // V√©rifier quels agents existent dans la structure
    for (const dept in this.companyStructure) {
      console.log(`   üìÇ ${dept}:`);

      for (const position of this.companyStructure[dept]) {
        const filename = this.getAgentFilename(position.agent);

        try {
          await fs.access(path.join(this.agentsDir, filename));
          position.exists = true;
          console.log(`      ‚úÖ ${position.role} (${position.agent})`);
        } catch {
          position.exists = false;
          console.log(`      ‚ùå ${position.role} (${position.agent}) - MANQUANT`);
        }
      }

      console.log('');
    }
  }

  /**
   * 2. ANALYSE charge de travail
   */
  async analyzeWorkload() {
    console.log('üìà ANALYSE CHARGE DE TRAVAIL\n');

    // Analyser les recommendations en attente
    const recommendations = await this.hub.readRecommendations();
    const tasks = await fs.readFile(
      path.join(process.cwd(), '.github/agents-communication/tasks.json'),
      'utf-8'
    );
    const tasksData = JSON.parse(tasks);
    const pendingTasks = tasksData.items.filter(t => t.status === 'pending');

    console.log(`   üìù Recommandations en attente: ${recommendations.length}`);
    console.log(`   üìã T√¢ches en attente: ${pendingTasks.length}`);

    // Calculer charge par d√©partement
    const workloadByDept = {
      'Engineering': pendingTasks.filter(t => t.type === 'development').length,
      'Product': recommendations.filter(r => r.type === 'feature_request').length,
      'Data': recommendations.filter(r => r.type === 'data_quality').length,
      'Infrastructure': 0 // Calcul√© dynamiquement
    };

    console.log('\n   üìä Charge par d√©partement:');
    for (const [dept, count] of Object.entries(workloadByDept)) {
      const status = count > 10 ? 'üî¥ SURCHARG√â' : count > 5 ? 'üü† CHARG√â' : 'üü¢ OK';
      console.log(`      ${dept}: ${count} t√¢ches ${status}`);
    }

    this.workloadAnalysis = workloadByDept;

    console.log('');
  }

  /**
   * 3. IDENTIFICATION besoins recrutement
   */
  async identifyRecruitmentNeeds() {
    console.log('üéØ IDENTIFICATION BESOINS RECRUTEMENT\n');

    // R√®gle 1: Agents critiques manquants
    for (const dept in this.companyStructure) {
      for (const position of this.companyStructure[dept]) {
        if (!position.exists && position.priority === 'critical') {
          this.recruitmentNeeds.push({
            department: dept,
            role: position.role,
            agent: position.agent,
            reason: 'Agent critique manquant',
            urgency: 'immediate'
          });

          console.log(`   üö® URGENT: Recruter ${position.role}`);
          console.log(`      Raison: Agent critique manquant`);
          console.log(`      D√©partement: ${dept}\n`);
        }
      }
    }

    // R√®gle 2: Surcharge d√©tect√©e
    for (const [dept, workload] of Object.entries(this.workloadAnalysis)) {
      if (workload > 10) {
        // Besoin d'agents suppl√©mentaires
        this.recruitmentNeeds.push({
          department: dept,
          role: `Additional ${dept} Engineer`,
          reason: `Surcharge d√©tect√©e (${workload} t√¢ches)`,
          urgency: 'high'
        });

        console.log(`   ‚ö†Ô∏è  BESOIN: ${dept} surcharg√©`);
        console.log(`      Charge: ${workload} t√¢ches`);
        console.log(`      Action: Recruter agent suppl√©mentaire\n`);
      }
    }

    // R√®gle 3: Croissance projets (via Visionnaire)
    const recommendations = await this.hub.readRecommendations();
    const moonshots = recommendations.filter(r => r.type === 'moonshot');

    if (moonshots.length > 0) {
      console.log(`   üöÄ ${moonshots.length} projets moonshot d√©tect√©s`);
      console.log(`      ‚Üí Pr√©voir scaling √©quipe\n`);
    }

    this.optimalTeamSize = this.teamSize + this.recruitmentNeeds.length;

    console.log(`   üìä Analyse termin√©e:`);
    console.log(`      √âquipe actuelle: ${this.teamSize}`);
    console.log(`      Recrutements n√©cessaires: ${this.recruitmentNeeds.length}`);
    console.log(`      √âquipe cible: ${this.optimalTeamSize}\n`);
  }

  /**
   * 4. RECRUTEMENT automatique
   */
  async autoRecruit() {
    console.log('üéì RECRUTEMENT AUTOMATIQUE\n');

    if (this.recruitmentNeeds.length === 0) {
      console.log('   ‚úÖ Pas de recrutement n√©cessaire\n');
      return;
    }

    console.log(`   üìù ${this.recruitmentNeeds.length} postes √† pourvoir\n`);

    // Pour chaque besoin, g√©n√©rer recommandation au Chef
    for (const need of this.recruitmentNeeds) {
      await this.hub.addRecommendation({
        type: 'recruitment',
        from: 'Agent RH',
        title: `Recruter ${need.role}`,
        description: `${need.reason} - D√©partement ${need.department}`,
        priority: need.urgency,
        category: 'team_scaling',
        targetAgent: 'Agent Chef de Projet',
        nextSteps: [
          'Valider besoin de recrutement',
          'G√©n√©rer template agent',
          'Cr√©er fichier agent',
          'Configurer workflow',
          'Onboarding agent'
        ],
        autoGenerate: true // Flag pour g√©n√©ration automatique
      });

      console.log(`   ‚úÖ Recommandation cr√©√©e: ${need.role}`);
    }

    console.log(`\n   üì® ${this.recruitmentNeeds.length} recommandations envoy√©es au Chef\n`);
  }

  /**
   * 5. TEAM OPTIMIZATION
   */
  async optimizeTeam() {
    console.log('‚öôÔ∏è  OPTIMISATION √âQUIPE\n');

    // Suggestions d'optimisation
    const optimizations = [];

    // Si trop d'agents inactifs
    const inactiveThreshold = 7; // jours
    optimizations.push({
      type: 'consolidation',
      suggestion: 'Fusionner agents sous-utilis√©s',
      impact: 'R√©duction co√ªts workflows'
    });

    // Si agents font du travail similaire
    optimizations.push({
      type: 'specialization',
      suggestion: 'Sp√©cialiser agents selon domaines',
      impact: 'Meilleure efficacit√©'
    });

    // Si goulot d'√©tranglement
    if (this.workloadAnalysis['Engineering'] > 10) {
      optimizations.push({
        type: 'parallel_processing',
        suggestion: 'Parall√©liser t√¢ches Engineering',
        impact: 'R√©duction temps delivery'
      });
    }

    console.log('   üí° Optimisations sugg√©r√©es:\n');
    optimizations.forEach((opt, index) => {
      console.log(`   ${index + 1}. ${opt.suggestion}`);
      console.log(`      Type: ${opt.type}`);
      console.log(`      Impact: ${opt.impact}\n`);
    });
  }

  /**
   * 6. PERFORMANCE REVIEW
   */
  async performanceReview() {
    console.log('üìä PERFORMANCE REVIEW\n');

    // M√©triques par agent (simul√© pour l'instant)
    const agentMetrics = [
      { agent: 'Agent Chef de Projet', tasks: 25, successRate: 95, avgTime: '2h' },
      { agent: 'Agent Visionnaire', recommendations: 13, implementationRate: 60 },
      { agent: 'Agent Producteur', gaps: 7, improvements: 10 },
      { agent: 'Agent Aiguilleur', conflicts: 1, resolved: 1 }
    ];

    console.log('   üèÜ Top Performers:\n');
    agentMetrics.forEach((metrics, index) => {
      console.log(`   ${index + 1}. ${metrics.agent}`);
      const keys = Object.keys(metrics).filter(k => k !== 'agent');
      keys.forEach(key => {
        console.log(`      ${key}: ${metrics[key]}`);
      });
      console.log('');
    });
  }

  /**
   * UTILS
   */
  getAgentFilename(agentName) {
    return agentName
      .toLowerCase()
      .replace('agent ', '')
      .replace(/ /g, '-') + '.js';
  }

  /**
   * 7. RAPPORT RH
   */
  async generateHRReport() {
    const report = `# üëî RAPPORT RH - Gestion √âquipe Autonome

**Date**: ${new Date().toLocaleString('fr-FR')}
**Agent**: RH (Recruitment & Scaling)

> "Une soci√©t√© qui s'auto-g√®re et recrute selon les besoins"

---

## üë• EFFECTIF ACTUEL

**Taille √©quipe**: ${this.teamSize} agents
**√âquipe optimale**: ${this.optimalTeamSize} agents
**Gap**: ${this.optimalTeamSize - this.teamSize} agents √† recruter

---

## üè¢ STRUCTURE SOCI√âT√â

${Object.entries(this.companyStructure).map(([dept, positions]) => `
### ${dept}

${positions.map(p => `- ${p.exists ? '‚úÖ' : '‚ùå'} **${p.role}** (${p.agent}) - Priority: ${p.priority}`).join('\n')}
`).join('\n')}

---

## üìà CHARGE DE TRAVAIL

${Object.entries(this.workloadAnalysis).map(([dept, count]) => {
  const status = count > 10 ? 'üî¥ SURCHARG√â' : count > 5 ? 'üü† CHARG√â' : 'üü¢ OK';
  return `- **${dept}**: ${count} t√¢ches ${status}`;
}).join('\n')}

---

## üéØ BESOINS RECRUTEMENT (${this.recruitmentNeeds.length})

${this.recruitmentNeeds.map((need, i) => `
### ${i + 1}. ${need.role}

- **D√©partement**: ${need.department}
- **Raison**: ${need.reason}
- **Urgence**: ${need.urgency}
- **Status**: Recommandation envoy√©e au Chef
`).join('\n')}

---

## üí° OPTIMISATIONS SUGG√âR√âES

1. **Sp√©cialisation agents**
   - Agents trop g√©n√©ralistes
   - Cr√©er agents sp√©cialis√©s par domaine

2. **Parall√©lisation**
   - Engineering surcharg√©
   - Recruter agents suppl√©mentaires

3. **Consolidation**
   - Certains agents sous-utilis√©s
   - Fusionner r√¥les similaires

---

## üìä SCALING PLAN

### Court Terme (Imm√©diat)
${this.recruitmentNeeds.filter(n => n.urgency === 'immediate').map(n => `- Recruter ${n.role}`).join('\n') || '- Aucun recrutement urgent'}

### Moyen Terme (Cette Semaine)
${this.recruitmentNeeds.filter(n => n.urgency === 'high').map(n => `- Recruter ${n.role}`).join('\n') || '- Aucun recrutement prioritaire'}

### Long Terme (Ce Mois)
${this.recruitmentNeeds.filter(n => n.urgency === 'medium').map(n => `- Recruter ${n.role}`).join('\n') || '- Aucun recrutement planifi√©'}

---

## üéØ OBJECTIF

**Maintenir une √©quipe optimale qui scale automatiquement selon:**
- La charge de travail
- Les nouveaux projets (Visionnaire)
- Les besoins d√©tect√©s (Producteur)
- Les goulots d'√©tranglement

**Principe**: "Si la soci√©t√© a besoin d'un agent, elle le recrute automatiquement"

---

## üöÄ PROCHAINES ACTIONS

1. Chef √©value recommandations recrutement
2. G√©n√©ration automatique nouveaux agents
3. Onboarding et int√©gration
4. Monitoring performance
5. Ajustement continu

---

**üëî G√©n√©r√© par Agent RH**
**"Une soci√©t√© vivante qui s'auto-g√®re"**
`;

    await fs.writeFile(
      path.join(process.cwd(), 'RAPPORT-AGENT-RH.md'),
      report,
      'utf-8'
    );

    console.log('   ‚úÖ Rapport sauvegard√©: RAPPORT-AGENT-RH.md\n');
  }
}

// Ex√©cution
if (require.main === module) {
  const agent = new AgentRH();
  agent.run().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = AgentRH;
