#!/usr/bin/env node

/**
 * AGENT QA - Testeur qui valide le dashboard
 *
 * RESPONSABILIT√âS:
 * - Tester toutes les fonctionnalit√©s du dashboard
 * - V√©rifier que les bugs sont fix√©s
 * - Cr√©er un rapport de test d√©taill√©
 * - Identifier les r√©gressions
 * - Valider selon le CAHIER-DES-CHARGES.md
 */

const fs = require('fs');
const path = require('path');

class AgentQA {
  constructor() {
    this.dashboardPath = path.join(process.cwd(), 'public/index.html');
    this.cahierPath = path.join(process.cwd(), 'CAHIER-DES-CHARGES.md');
    this.tests = [];
    this.passed = 0;
    this.failed = 0;
  }

  log(message) {
    console.log(`‚úÖ [AGENT QA] ${message}`);
  }

  async run() {
    this.log('D√âMARRAGE - Quality Assurance');
    console.log('================================================\n');

    if (!fs.existsSync(this.dashboardPath)) {
      this.log('‚ùå ERREUR: Dashboard introuvable!');
      return;
    }

    const content = fs.readFileSync(this.dashboardPath, 'utf8');

    // Tests statiques (analyse code)
    await this.runStaticTests(content);

    // G√©n√©rer rapport
    await this.generateReport();

    this.log(`\nüìä R√âSULTATS: ${this.passed} passed / ${this.failed} failed`);
    this.log('‚úÖ Agent QA termin√©');
  }

  test(name, condition, details = '') {
    const result = condition ? 'PASS' : 'FAIL';
    const emoji = condition ? '‚úÖ' : '‚ùå';

    this.tests.push({ name, result, details });

    if (condition) {
      this.passed++;
      this.log(`${emoji} ${name}`);
    } else {
      this.failed++;
      this.log(`${emoji} ${name}`);
      if (details) this.log(`   ‚îî‚îÄ ${details}`);
    }
  }

  async runStaticTests(content) {
    this.log('üß™ TESTS STATIQUES...\n');

    // Test 1: Fonctions expos√©es globalement
    this.test(
      'showClientDetails expos√©e',
      content.includes('window.showClientDetails ='),
      'Bug #1 du rapport'
    );

    this.test(
      'showIndustryDetails expos√©e',
      content.includes('window.showIndustryDetails ='),
      'Bug #2 du rapport'
    );

    this.test(
      'showKPIDetails expos√©e',
      content.includes('window.showKPIDetails ='),
      'Bug #3 du rapport'
    );

    this.test(
      'showWhiteSpaceDetails expos√©e',
      content.includes('window.showWhiteSpaceDetails =')
    );

    this.test(
      'toggleGroup expos√©e',
      content.includes('window.toggleGroup =')
    );

    // Test 2: Graphiques appel√©s
    this.test(
      'renderSegmentDonutChart appel√©',
      content.includes('renderSegmentDonutChart();'),
      'Graphique avanc√© #1'
    );

    this.test(
      'renderRadarChart appel√©',
      content.includes('renderRadarChart();'),
      'Graphique avanc√© #2'
    );

    this.test(
      'renderStackedAreaChart appel√©',
      content.includes('renderStackedAreaChart();'),
      'Graphique avanc√© #3'
    );

    this.test(
      'renderHealthTrendsChart appel√©',
      content.includes('renderHealthTrendsChart();'),
      'Graphique avanc√© #4'
    );

    // Test 3: Pas d'erreurs JS basiques
    this.test(
      'Pas de console.error dans le code',
      !content.includes('console.error') || content.split('console.error').length < 5,
      'Limite de logging errors'
    );

    // Test 4: Structure HTML correcte
    this.test(
      'Structure HTML valide',
      content.includes('<html') && content.includes('</html>'),
      'Tags HTML pr√©sents'
    );

    this.test(
      'Script tag pr√©sent',
      content.includes('<script>') && content.includes('</script>'),
      'JavaScript pr√©sent'
    );

    // Test 5: Data loading
    this.test(
      'Fonction loadData d√©finie',
      content.includes('function loadData()') || content.includes('const loadData ='),
      'Chargement des donn√©es'
    );

    // Test 6: Chart library
    this.test(
      'Chart.js import√©',
      content.includes('chart.js') || content.includes('Chart.'),
      'Biblioth√®que graphiques'
    );

    console.log('');
  }

  async generateReport() {
    const score = Math.round((this.passed / (this.passed + this.failed)) * 100);
    const status = score >= 90 ? 'üü¢ EXCELLENT' : score >= 70 ? 'üü° ACCEPTABLE' : 'üî¥ PROBL√àMES';

    const report = `# ‚úÖ RAPPORT AGENT QA

**Date**: ${new Date().toLocaleString('fr-FR')}
**Score**: ${score}/100 ${status}

## üìä R√âSUM√â

- Tests pass√©s: ${this.passed}
- Tests √©chou√©s: ${this.failed}
- Total: ${this.tests.length}

## üß™ D√âTAILS DES TESTS

${this.tests.map(t => `- ${t.result === 'PASS' ? '‚úÖ' : '‚ùå'} ${t.name}${t.details ? ` - ${t.details}` : ''}`).join('\n')}

## üéØ RECOMMANDATIONS

${this.failed === 0
  ? '‚úÖ Tous les tests passent. Le dashboard est pr√™t pour d√©ploiement.'
  : `‚ö†Ô∏è  ${this.failed} test(s) √©chou√©(s). Faire passer l'Agent Debugger avant d√©ploiement.`}

${score < 90
  ? '\n### Actions requises:\n' + this.tests.filter(t => t.result === 'FAIL').map(t => `- Fixer: ${t.name}`).join('\n')
  : ''}

---

ü§ñ Generated by Agent QA
`;

    fs.writeFileSync('RAPPORT-AGENT-QA.md', report);
    this.log('\nüìù Rapport g√©n√©r√©: RAPPORT-AGENT-QA.md');
  }
}

// Ex√©cution
if (require.main === module) {
  const agent = new AgentQA();
  agent.run().catch(console.error);
}

module.exports = AgentQA;
